picotron cartridge // www.picotron.net
version 2

:: .info.pod
b64$LS1bW3BvZCx0aXRsZT0iQWJvdXQiLGF1dGhvcj0iemVwIixzdG9yZWQ9IjIwMjQtMDMtMjMg
MTk6MzQ6MTUiLG5vdGVzPSJGaWxlIG1ldGFkYXRhIHZpZXdlciBhbmQgZWRpdG9yLlxuQ2xpY2sg
b24gdGhlIGljb24gdG8gZWRpdCBpdCEiLGNyZWF0ZWQ9IjIwMjQtMDQtMTYgMTM6NTk6NDEiLGlj
b249dXNlcmRhdGEoInU4IiwxNiwxNiwiMDAwMDAwMDEwMTAxMDEwMTAxMDEwMTAxMDEwMDAwMDAw
MDAwMDEwNzA3MDcwNzA3MDcwNzA3MDcwNzAxMDAwMDAwMDEwNzBkMGQwZDBkMGQwZDBkMGQwZDBk
MDcwMTAwMDEwNzBkMGQwZDBkMDcwNzA3MDcwZDBkMGQwZDA3MDEwMTA3MGQwZDBkMDcwNzBkMGQw
NzA3MGQwZDBkMDcwMTAxMDcwZDBkMDcwNzA3MDcwNzA3MDcwNzBkMGQwNzAxMDEwNzBkMGQwNzA3
MDcwZDBkMDcwNzA3MGQwZDA3MDEwMTA3MGQwZDA3MDcwNzBkMGQwNzA3MDcwZDBkMDcwMTAxMDcw
ZDBkMDcwNzA3MGQwZDA3MDcwNzBkMGQwNzAxMDEwNzBkMGQwZDA3MDcwZDBkMDcwNzBkMGQwZDA3
MDEwMTA3MGQwZDBkMGQwNzA3MDcwNzBkMGQwZDBkMDcwMTAxMDYwNzBkMGQwZDBkMGQwZDBkMGQw
ZDBkMDcwNjAxMDEwNjA2MDcwNzA3MDcwNzA3MDcwNzA3MDcwNjA2MDEwMDAxMDYwNjA2MDYwNjA2
MDYwNjA2MDYwNjA2MDEwMDAwMDAwMTA2MDYwNjA2MDYwNjA2MDYwNjA2MDEwMDAwMDAwMDAwMDEw
MTAxMDEwMTAxMDEwMTAxMDEwMDAwMDAiKSxtb2RpZmllZD0iMjAyNS0wNC0yNyAxNjo0NzoyMCIs
dmVyc2lvbj0iIix3b3Jrc3BhY2VzPXt7bG9jYXRpb249Im1haW4ubHVhIzkwIix3b3Jrc3BhY2Vf
aW5kZXg9MX0se2xvY2F0aW9uPSJndWkubHVhIzE1MiIsd29ya3NwYWNlX2luZGV4PTF9LHtsb2Nh
dGlvbj0iaWNvbi5sdWEjMSIsd29ya3NwYWNlX2luZGV4PTF9LHtsb2NhdGlvbj0iZ2Z4LzAuZ2Z4
Iix3b3Jrc3BhY2VfaW5kZXg9Mn0se2xvY2F0aW9uPSJtYXAvMC5tYXAiLHdvcmtzcGFjZV9pbmRl
eD0zfX1dXWx6NAAEAAAAAwAAADBuaWw=
:: gfx/
:: gfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDIzLTEwLTE2IDA2OjMxOjUyIixtb2RpZmllZD0iMjAyNS0w
NC0yNyAxNjo0NzoyMCIsc3RvcmVkPSIyMDIzLTMxLTE2IDA2OjMxOjUyIl1dbHo0AAQAAAADAAAA
MG5pbA==
:: gfx/0.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDIzLTMyLTE2IDA2OjMyOjE4Iixtb2RpZmllZD0iMjAyNC0w
My0xMyAwNzowNTo1NCIscmV2aXNpb249OTk4XV1sejQABgIAAEYzAADzF3tbMF09e2JtcD1weHUA
QyAFAQQAAQ0GByxmbGFncz0wLHBhbl94CADLeT0wLHpvb209OH0sNABvDxIPDg8XNwAaXxAQBPDw
MQD-E-MFAxcANwAXQAeQByAHsAcQB7AH8AIJABwQEQBRIAeQB0AwAC-wA5kAHg8xAP9D-wH2NR8R
9g4d9g4fHRYfF-ZlcAAeDzEA-0TfCVGAAS0mAQBhLTYR1gIAAU8BANEAVQAhnyYnAQBhJjcR1wIA
AQ9VACGPAPEB1xEHvQcEAAL-BdcRF4YnEReGFwYRtwYBAAG2ARDB_gMe-woAkVABdwYBQAF3FgEw
AXcmASABdzYBEAG3BAATD9MAHpAQoTABpgEQAQcGABARCgA-tgEADgAM-wOWERCxBwEQEZcGASAB
lgFAkSB1ACARrXUAQK0BEBEKAD_9AQAOAAwUnXUAXw0BIAGddQAgb-EBFpcWEQQABQJqAoMmgRYR
JgE3MQYAQQEAARYIAC8Q0W0AHLAgkUABlwEgAQedB74AByYCDwQAAVAGB50HBocAATYCD1QBIy-w
8DEA-0RgEdEAEbchMgT5ABedFxEHDRENFgEGDRENBwwAABwAz9cR3RE9UT0BANHwEZcAHg8xAP--
----------------------------------------------------WVBtPTh9fQ==
:: map/
:: map/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDIzLTEwLTE2IDA2OjMxOjUyIixtb2RpZmllZD0iMjAyNS0w
NC0yNyAxNjo0NzoyMCIsc3RvcmVkPSIyMDIzLTMxLTE2IDA2OjMxOjUyIl1dbHo0AAQAAAADAAAA
MG5pbA==
:: map/0.map
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDIzLTMyLTE2IDA2OjMyOjE4Iixtb2RpZmllZD0iMjAyNC0w
My0xMyAwNzowNTo1NCIscmV2aXNpb249OTMzXV1sejQAXAAAAFgEAADwCHt7Ym1wPXVzZXJkYXRh
KCJpMTYiLDE2AwAvIjABAP---_-xCCIpLGhpZGRlbj1mYWxzZSxwYW5feD0wCADSeT0wLHRpbGVf
aD0xNgoAEHcKAIB6b29tPTF9fQ==
:: sfx/
:: sfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDIzLTEwLTE2IDA2OjMxOjUyIixtb2RpZmllZD0iMjAyNS0w
NC0yNyAxNjo0NzoyMCIsc3RvcmVkPSIyMDIzLTMxLTE2IDA2OjMxOjUyIl1dbHo0AAQAAAADAAAA
MG5pbA==
:: gui.lua
--[[pod_format="raw",created="2023-17-22 10:17:57",modified="2024-03-13 07:05:54",revision=926]]
function generate_gui()
	
	gui = create_gui()
	
	if mode == "view" then
	
	gui:attach_button{
		x=-10,y=-4,
		justify="right",
		vjustify="bottom",
		label = "Edit",
		bgcol=0x070d,
		click = function()	
			mode = "edit"
			generate_gui()
		end
	}

	-- icon
	
	gui:attach{
		x=10,y=8,
		width=16, height=16,
		draw = function()
			spr(meta.icon or get_spr(8),0,0)
		end,
		click = function()	
			mode = "icon"
			generate_gui()
		end
	}	
	
	end
	
	if mode == "icon" then
		gui:attach(create_icon_editor())
		gui:attach(create_palette_chooser())
		
		-- presets / templates
		for y=0,1 do
			for x=0,3 do
				gui:attach(create_preset_button{x=112+x*20, y=42+y*20, index=x+y*4})
			end
		end
	end
	
	if (mode == "edit") then
	
	function create_field(label, key, x, y, height)
	
		-- label
		gui:attach{
			x = x-30, y = y+4, label = label,
			width = 40, height = 13,
			draw = function(self)
				clip()
				print("\014"..self.label, 0,0, 5)
			end
		}
		
		local texted = gui:attach_text_editor{
			x = x, y = y, key = key,
			width = 160, height = height or 13,
			--block_scrolling = true,
			max_lines = 2,
			
			key_callback = {
				enter = (not height) and function () 
					-- keep new value and close
					--newval[key] = texted:get_text()
				end,
				escape	 = function()
					-- close without keeping value
					-- 
				end,
			}
		}
		
		if (meta[key]) texted:set_text(meta[key])
		texted.key = key
		--printh("added text field with key: "..tostr(texted.key))
		return texted
	end
	
	-- fields
	local xx=34
	field = {
		create_field("title  ", "title", xx, 10),
		create_field("version", "version", xx, 25),
		create_field("author ", "author", xx, 40),
		create_field("notes  ", "notes", xx, 55, 26),
		
	}
	
	
	
	end
	
	-- Cancel, Save buttons shown in both editing modes
	if (mode ~= "view") then
	
	gui:attach_button{
		label = "Save",
		x=-10,y=-4,justify="right",vjustify="bottom",
		bgcol=0x070d,
		click = function()
		
			if (mode == "icon") then
				meta.icon = bmp--unpod(pod(bmp))
			else
				for i=1,#field do
					meta[field[i].key] = table.concat(field[i]:get_text(),"\n")
				end
			end
			
			sync_metadata()
			mode = "view"
			generate_gui()
			
			-- let filenav know (incase icon changes)
			send_message(2, {
				event = "broadcast",
				msg = {
					event = "filenav_refresh"
				}
			})
			
		end
	}
	
	gui:attach_button{
		label = "Cancel",
		x=-45,y=-4,justify="right",vjustify="bottom",
		bgcol=0x070d,
		click = function()
			sync_metadata()
			mode = "view"
			bmp = nil
			generate_gui()
		end
	}
	
	if (mode == "edit") then
		gui:attach_button{
			label = "Edit Icon",
			x=10,y=-4,justify="left",vjustify="bottom",
			bgcol=0x070d,
			click = function()
				mode="icon"
				generate_gui()
			end
		}
	end
	
	end
	
end




























:: icon.lua
--[[pod_format="raw",created="2023-45-25 08:45:20",modified="2024-03-13 07:05:54",revision=450]]
--[[

	specialised icon editor
	just for about box

]]

function create_preset_button(el)

	el.width=16
	el.height=16
	el.bmp=get_spr(24+el.index)
	
	function el:draw()
		spr(self.bmp, 0, 0)
	end
	
	function el:click()
		blit(self.bmp,bmp)
	end
	
	
	
	return el
	
end

function create_palette_chooser()

	local el = {
		x = 110, y = 6,
		width = 60, height = 12
	}
	
	function el:draw(msg)
		clip()
		rectfill(-1,-1,self.width,self.height,0)
		sspr(get_spr(0),0,0,5,1,0,0,self.width,self.height)
		
		for i=0,4 do
			if (col == get_spr(0):get(i,0)) then
				local ww = self.width/5
				local sx = i * ww
				rect(sx,0,sx+ww-1,self.height-1,0)
				rect(sx-1,0-1,sx+ww,self.height,7)
			end
		end
		
		-- dump other stuff here
		--rectfill(70,0,81,11,col)
		
		spr(bmp,68,-2)
	
		print("\014-- templates ---",10,24,13)
	end
	
	function el:drag(msg)
		local bmp = get_spr(0)
		local x = msg.mx * bmp:width() / self.width
		local y = msg.my * bmp:height() / self.height
		col = bmp:get(x,y)
	end
		
	return el
end



function create_icon_editor()

	local ed = {
		x=6,y=6,
		width=96,height=96
	}
	
	-- global
	col = 7
	
	bmp = userdata("u8",16,16)
	
	local bmp_width = bmp:width()
	local bmp_height= bmp:height()
	if (meta.icon) blit(meta.icon, bmp, 0, 0, 0, 0)
	
	function ed:draw(msg)
		clip()
		rectfill(-1,-1,self.width,self.height,0)
		sspr(bmp,0,0,16,16,0,0,self.width,self.height)
		
	end
	
	function ed:drag(msg)
		local x = msg.mx * bmp_width / self.width
		local y = msg.my * bmp_height / self.height
		if (msg.mb > 1) then
			col = get(bmp,x,y,col)
		else
			set(bmp,x,y,col)
		end
	end
	
	
	return ed
end




















:: main.lua
--[[pod_format="raw",created="2023-32-16 06:32:18",modified="2024-03-13 07:05:54",revision=1176]]
--[[

	about.p64
	general purpose metadata viewer and editor
	
	future: calculate total size of folder
	future: manage current cartridge (Cartridge Info from picotron menu)
	future: system info (when inspecting /system)
	future: multiple files and flip through them (e.g. CTRL-A, CTRL-I)
	
]]

include "icon.lua"
include "gui.lua"

-- view, edit, icon
mode = "view"

function sync_metadata()

	if (meta) store_metadata(fn, meta)
	meta = meta or fetch_metadata(fn) or {}
	--printh("[a3] fetching metadata for file: "..fn.."  // path:"..pwd())
	
end

bunny = userdata"[gfx]101000000000000000000001111111111000001dddddddddd10001d1111111111d101d111111111111d11d111771177111d11d111771177111d11d111771177111d11d111777777111d11d111717717111d11d111777777111d11d111111111111d101d1111111111d10001dddddddddd10000011111111110000000000000000000[/gfx]"

function _init()
	
	cls(7)
	
	poke(0x4000,get(fetch"/system/fonts/lil.font"))
	poke(0x5600,get(fetch"/system/fonts/p8.font"))
	poke(0x5602,6) -- to do: should be standard for p8.font
	
	cd(env().path) -- can use from terminal
	fn = env().argv[1] or env().prog or "/ram/cart"
	
	--printh("[a3] initial fn: "..fn)
	fn = fullpath(fn)
	
	local segs = split(fn,"/",false)
	fn_short = segs[#segs]
	fn_path  = string.sub(fn, 1, -#segs[#segs] - 2)

	cd(fn_path) -- same path as the file or folder in question
	
	--printh("[a3] changed to fn_path: "..fn_path)

	sync_metadata()
	
	window{
		width = 200,
		height = 108,
		title = "About"
	}
	
	generate_gui()
	
end

function _draw()
	cls(6)
	
	if (mode == "view") then
	--rectfill(0,0,1000,32,7)
	
	-- sprite handled by gui element
	--spr(meta.icon or get_spr(8),10,8)
	
	local title = meta.title
	if (type(title) ~= "string") title = fn_short or ""
	
		
	local version = meta.version
	if (type(version) ~= "string") version = nil
	
	local author = meta.author 
	if (type(author) ~= "string") author = nil
	
	title..= " \014\^i\|h"--..meta.version
	
	print(title, 34, (version or author) and 8 or 12, 1)
	
		local str = "\014"
		if (version) str..= "\^i"..meta.version.."\^-i "
		if (author and author ~= "") str..= "\fdby "..meta.author:lower()
		print(str, 33, 20, 13)	
		
--[[
	if (meta.author and meta.author != "") then
		cursor(10,32) color(13)
		print("// by "..meta.author)
	end
]]

	-- 2 lines of notes
	if (meta.notes and meta.notes != "") then
		cursor(10,38) color(5)
		print(meta.notes)
	end
	
	
	local attribs, size, origin = fstat(fn)
	
	local yy = get_display():height()-38
	if (not origin) yy += 6
	cursor(10, yy) color(13)
	--?"\014author:    "..("zep" or "-")
	--?"\014revision:  "..(meta.revision or "-")

	--rectfill(0,yy-4,1000,1000,1)
	color(13)
	?"\014"..(fn or "?")
	?"\014"..((size and (size.." bytes on disk")) or "-")

	-- local times; to do: click to toggle gmt
	-- to do: n days ago
	?"\014"..(meta.created and date("%Y-%m-%d %H:%M:%S", meta.created) or "[no date_created]")
	?"\014"..(meta.modified and date("%Y-%m-%d %H:%M:%S", meta.modified) or "[no date_modified]")
	if (origin) then
	?"\014origin: "..(origin or fullpath(fn) or "?")	
	end
	
	end -- "view" mode
	
	
	gui:draw_all()
end

function _update()

	if (key"ctrl") then
	
		if (mode == "icon") then
			if (keyp("v")) then
				local c,m = unpod(get_clipboard())
			
				if (type(c)=="userdata" and c:width()==16 and c:height()==16) then
					meta.icon = c
					bmp = c -- in case inside editor
					sync_metadata()	
				end
		
			end
		
			-- copy icon
			if (keyp("c")) then
				local bb = bmp or meta.icon
				if (bb) then 
					set_clipboard(pod(bb),{pod_type="image"})
					notify("copied icon")
				end
			end
		end
	
	end
	
	gui:update_all()
end































:: [eoc]
