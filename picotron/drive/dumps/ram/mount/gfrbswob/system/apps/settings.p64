picotron cartridge // www.picotron.net
version 2

:: gfx/
:: gfx/0.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDIzLTEwLTAyIDA2OjQ0OjUyIixtb2RpZmllZD0iMjAyNC0w
Ni0wNyAwNzoxMjo0MCIscmV2aXNpb249NjAzXV1sejQAbQAAAAUxAADzFHtbMF09e2JtcD1weHUA
QyAQEATw8CxmbGFncz0wLHBhbl94CADPeT0wLHpvb209OH0sMQD-------------------------
---------------------------------------nUG09OH19
:: gfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDIzLTEwLTAyIDA2OjQ0OjIwIixtb2RpZmllZD0iMjAyNS0w
My0zMSAxOToyMzowNSIsc3RvcmVkPSIyMDIzLTQ0LTAyIDA2OjQ0OjIwIl1d
:: map/
:: map/0.map
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDIzLTEwLTAyIDA2OjQ0OjUyIixtb2RpZmllZD0iMjAyNC0w
Ni0wNyAwNzoxMjo0MCIscmV2aXNpb249NTk4XV1sejQAaAAAAFgQAADwCHt7Ym1wPXVzZXJkYXRh
KCJpMTYiLDMyAwAvIjABAP--------------------vxCCIpLGhpZGRlbj1mYWxzZSxwYW5feD0w
CADSeT0wLHRpbGVfaD0xNgoAEHcKAIB6b29tPTF9fQ==
:: map/map0.map
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTQ4LTA0IDE2OjQ4OjAxIixtb2RpZmllZD0iMjAyNC00
OC0wNCAxNjo0ODowMSIscmV2aXNpb249MF1dbHo0AGkAAACjCAAA8BN7bGF5ZXI9e1swXT17Ym1w
PXVzZXJkYXRhKCJpMTYiLDE2AwAvIjABAP---__hIikscGFuX3g9MAgA8gZ5PTAsc2NhbGU9MSx0
aWxlX2g9MTYKAG93PTE2fSxLBP----84UDE2fX19
:: map/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDIzLTEwLTAyIDA2OjQ0OjIwIixtb2RpZmllZD0iMjAyNS0w
My0zMSAxOToyMzowNSIsc3RvcmVkPSIyMDIzLTQ0LTAyIDA2OjQ0OjIwIl1d
:: sfx/
:: sfx/0.sfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDIzLTEwLTAyIDA2OjQ0OjUyIixtb2RpZmllZD0iMjAyNC0w
Ni0wNyAwNzoxMjo0MCIscmV2aXNpb249NTU0XV1sejQAcAAAAO4HAADfcHh1AAMoAAAEAATw-wEA
7P8n8QEQBg8gEAEgASAB8AACEAIOEAEgDyEgATAPQPDDDygP--DGD-gKD-8PgA-3Dw0B8AkBEAYO
MAD-OR--AQDcz-gPQAAPEED--7DwcAsA--_jH-8BAP_ZUP----8g
:: sfx/sfx0.sfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTQ4LTA0IDE2OjQ4OjAxIixtb2RpZmllZD0iMjAyNC00
OC0wNCAxNjo0ODowMSIscmV2aXNpb249MF1dbHo0ABABAABRBwAA8CdweHUAAygAAAMABA9AEAIO
AAGgASACoA4ADxAADfDKAQIDBAUGBwEP-5AICQoLDwwPDQ8ODw8QAPAADQ8RDxIPEw8UDxUPFg8X
EwDxAQ8YDxkPGg8bDxwPHQ8eDx8UAPEAIA8hDyIPIw8kDyUPJg8nFADxACgPKQ8qDysPLA8tDy4P
LxQA8QAwDzEPMg8zDzQPNQ82DzcUAP8FOA85DzoPOw88Dz0PPg8-AQ--8P8BAOv-J1oBEAYPIBAB
IAEgAfAAAhACDBABIA8hIAEwD0Dwww8oD--wxg-4Cg--D4AP9w8NAfAJARAGDDAA-zkf-wEA3L-4
D0AADUD--7DwcAoA--9kH-8BAJdQ-----x8=
:: sfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDIzLTEwLTAyIDA2OjQ0OjIwIixtb2RpZmllZD0iMjAyNS0w
My0zMSAxOToyMzowNSIsc3RvcmVkPSIyMDIzLTQ0LTAyIDA2OjQ0OjIwIl1d
:: main.lua
--[[pod_format="raw",created="2023-10-02 06:44:52",modified="2024-06-07 07:12:40",revision=877]]
-- picotron settings
-- to do: keyboard control

page = 1
sdat = {}


function create_checkbox(x, y, label, key)
	local el = {
		x = x, y = y,
		width = 98,
		height  = 12,
		label = label,
		key = key,
		cursor = "pointer"
	}
	
	function el:draw()
		rect(0,0,8,8,1)
		if (sdat[key]) rectfill(2,2,6,6,1)
		print(label, 15, 1, 13)
	end
	
	function el:click()
		sdat[key] = not sdat[key]
		store_settings()
	end
	
	return el
end

function create_chooser(x, y, key, path)

	local el = gui:attach{
		x = x, y = y,
		width = 90,
		height=50,
		key=key,
		path=path
	}
	
	local item_h = 12
	
	function el:draw()
		rectfill(0,0,self.width-1, self.height-1,1)
	end

	local path1 = path


	-- custom folder
	if (fstat("/appdata"..path) == "folder") then
		path1 = "/appdata"..path
	end
	files = ls(path1) or {}
	
	
	local item = {}
	if (path == "/system/themes") then
		add(item, {label = "[custom]", filename = "/appdata/system/theme.pod"})
	end

	if (path == "/system/screensavers") then
		add(item, {label = "[none]", filename = nil})
	end
	
	for i=1, #files do
		add(item, {label = split(files[i],".")[1], filename = path1.."/"..files[i]})
	end
	
	local contents = el:attach{
		x = 0, y = 0,
		width = 80, height = 8 + #item * item_h,
		item = item
	}
	
	function contents:draw()
		for i = 1, #self.item do
			local item = self.item[i]
			local yy = 4 + (i-1)*item_h
			color(6)
			if (item.filename == sdat[key]) rectfill(0,yy-1,self.width-1,yy+8) color(1)
			print(item.label, 3, yy)
		end
	end
	
	function contents:click(msg)
		local i = mid(1, 1 + (msg.my - 4) \ item_h, #self.item)
		newi = i ~= last_i last_i = i
		
		-- act on selection (can return early to reject change)
		
		-- theme change: copy over system default
		if (path == "/system/themes") then
			local tdat = fetch(self.item[i].filename)
			if (tdat) store("/ram/shared/theme.pod", tdat)
		end
		
		-- desktop change: kill process and start new one (!)
		if (path == "/system/wallpapers") then
			send_message(3, {event="set_wallpaper", wallpaper = self.item[i].filename})
		end	
		
		-- store change in system settings
		-- theme, wallpaper and screensaver are all full path filenames
		
		sdat[key] = self.item[i].filename
		store_settings()
		
	end
	
	function contents:doubleclick(msg)
		local i = mid(1, 1 + (msg.my - 4) \ item_h, #self.item)
		if (newi) return -- don't count as a double click
		
		if (key=="screensaver" and sdat.screensaver) send_message(3, {event="test_screensaver"})
		
		if (key=="theme") then
			-- copy over system default and edit that
			sdat.theme = "/appdata/system/theme.pod"
			store_settings()
			
			local tdat = fetch(self.item[i].filename)
			if (tdat) store("/appdata/system/theme.pod", tdat)
			create_process("/system/apps/themed.p64", {argv={"/appdata/system/theme.pod"}})
		end
	end
	
	
	el:attach_scrollbars()

	return el
end

function generate_gui()
	gui = create_gui()
	
	local line_h = 12
	
	-- page toggle

	gui:attach{
		x=170,y=4, width=35, height=9,
		cursor="pointer",
		draw=function(self, msg)
			rectfill(0,0,self.width,self.height, msg.has_pointer and 14 or 13)
			print("\014page "..page.."/2",2,2,7)
		end,
		tap=function(self)
			page = page == 1 and 2 or 1
			generate_gui()
		end
	}
	
if (page == 1) then
	local x, y = 10,20
	gui:attach(create_checkbox(x, y, "Fullscreen", "fullscreen")) y += line_h
	gui:attach(create_checkbox(x, y, "Pixel Perfect", "pixel_perfect")) y += line_h
	gui:attach(create_checkbox(x, y, "Stretch", "stretch")) y += line_h
	
	local x, y = 105,20
	
	--gui:attach(create_checkbox(x, y, "Volume", "system_volume")) y += line_h
	gui:attach(create_checkbox(x, y, "Mute", "mute_audio")) y += line_h
	gui:attach(create_checkbox(x, y, "Swap Stereo", "swap_stereo")) y += line_h
	
	gui:attach(create_chooser(10, 80, "theme", "/system/themes"))
	gui:attach(create_chooser(105, 80, "wallpaper", "/system/wallpapers"))
	
else
	-- page 2
	local x, y = 10,20
	gui:attach(create_checkbox(x, y, "Network", "network_access")) y += line_h
	gui:attach(create_checkbox(x, y, "Battery Saver", "battery_saver")) y += line_h
	
	gui:attach(create_checkbox(x,y, "Squishy Windows", "squishy_windows")) y += line_h
	
	y = 20
	gui:attach(create_checkbox(105, y, "RSHIFT Magnify", "rshift_magnify")) y += line_h
	gui:attach(create_checkbox(105, y, "Sparkles",       "sparkles")) y += line_h
	gui:attach(create_checkbox(105, y, "CTRL-Q Shutdown", "fastquit")) y += line_h
	
	y = 80
	gui:attach(create_checkbox(105, y, "Anywhen", "anywhen")) y += line_h
	gui:attach(create_checkbox(105, y, "Allow High DPI", "allow_highdpi")) y += line_h
	gui:attach(create_checkbox(105, y, "Fullscreen:Window", "fullscreen_window")) y += line_h
	
	-- choosers
	gui:attach(create_chooser(x, 80, "screensaver", "/system/screensavers"))
end
	
--[[
	-- don't need -- just double click
	gui:attach{
		x=256,y=66,width=19,height=9,
		draw=function(self,msg)
			rectfill(0,0,self.width-1, self.height-1, 3)
			print("\014test",2,2,1)
		end,
		tap=function(self,msg)
			--printh(sdat.screensaver)
			--create_process(sdat.screensaver)
			send_message(3, {event="test_screensaver"})
		end		
	}
]]
	
end

function store_settings()
	--printh("storing settings: "..pod(sdat))
	store("/appdata/system/settings.pod", sdat)
end

function _init()

	window{
		width=210,
		height=140,
		title="System Settings",
		resizeable = true
	}
	
	poke(0x4000, get(fetch"/system/fonts/lil.font"))
	
	sdat = fetch"/appdata/system/settings.pod" or {}
	
	generate_gui()
end

function _draw()
	cls(7)
	color(5)
	
	local yy = 67
	local prefix = ""--"\128\-j"
	
	if (page == 1) then
		print("Video",10,5)
		print("Audio",105,5)
		
		
		print(prefix.."Theme",10,yy)
		print(prefix.."Wallpaper",105,yy)
	else
		print("System",10,5)
		--print("Desktop",105,5)
		
		--line(10,60,280,60,6)
	
		--
	
		print(prefix.."Screensaver",10,yy)
		print(prefix.."Experimental",105,yy)
		
	end
	
	gui:draw_all()
end

function _update()
	gui:update_all()
end

-- reload changes
on_event("modified:/appdata/system/settings.pod", function(msg)
	sdat = fetch(msg.filename) or sdat or {}
end)


:: .info.pod
b64$LS1bW3BvZCxub3Rlcz0iIixpY29uPXVzZXJkYXRhKCJ1OCIsMTYsMTYsIjAwMDAwMDAxMDEw
MTAxMDEwMTAxMDEwMTAxMDAwMDAwMDAwMDAxMDcwNzA3MDcwNzA3MDcwNzA3MDcwMTAwMDAwMDAx
MDcwZDBkMGQwZDBkMGQwZDBkMGQwZDA3MDEwMDAxMDcwZDBkMGQwZDBkMGQwZDBkMGQwZDBkMGQw
NzAxMDEwNzBkMGQwZDBkMGQwZDBkMDcwNzBkMGQwZDA3MDEwMTA3MGQwZDAxMDEwMTAxMDEwNzA3
MDEwZDBkMDcwMTAxMDcwZDBkMGQwZDBkMGQwZDA3MDcwZDBkMGQwNzAxMDEwNzBkMGQwZDA3MDcw
ZDBkMGQwZDBkMGQwZDA3MDEwMTA3MGQwZDAxMDcwNzAxMDEwMTAxMDEwZDBkMDcwMTAxMDcwZDBk
MGQwNzA3MGQwZDBkMGQwZDBkMGQwNzAxMDEwNzBkMGQwZDBkMGQwZDBkMGQwZDBkMGQwZDA3MDEw
MTA2MDcwZDBkMGQwZDBkMGQwZDBkMGQwZDA3MDYwMTAxMDYwNjA3MDcwNzA3MDcwNzA3MDcwNzA3
MDYwNjAxMDAwMTA2MDYwNjA2MDYwNjA2MDYwNjA2MDYwNjAxMDAwMDAwMDEwNjA2MDYwNjA2MDYw
NjA2MDYwNjAxMDAwMDAwMDAwMDAxMDEwMTAxMDEwMTAxMDEwMTAxMDAwMDAwIiksYXV0aG9yPSJ6
ZXAiLGNyZWF0ZWQ9IjIwMjQtMDQtMTIgMDI6MTY6MDciLG1vZGlmaWVkPSIyMDI1LTAzLTMxIDE5
OjIzOjA1IixydW50aW1lPTgsc3RvcmVkPSIyMDI0LTAzLTIzIDE4OjM2OjA4Iix0aXRsZT0iUGlj
b3Ryb24gU2V0dGluZ3MiLHZlcnNpb249IiIsd29ya3NwYWNlcz17e2xvY2F0aW9uPSJtYWluLmx1
YSMxMSIsd29ya3NwYWNlX2luZGV4PTF9LHtsb2NhdGlvbj0iZ2Z4LzAuZ2Z4Iix3b3Jrc3BhY2Vf
aW5kZXg9Mn0se2xvY2F0aW9uPSJtYXAvMC5tYXAiLHdvcmtzcGFjZV9pbmRleD0zfSx7bG9jYXRp
b249InNmeC8wLnNmeCIsd29ya3NwYWNlX2luZGV4PTR9fV1d
:: [eoc]
