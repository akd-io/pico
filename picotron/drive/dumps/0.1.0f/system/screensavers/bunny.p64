picotron cartridge // www.picotron.net
version 2

:: .info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDIzLTEwLTAyIDIyOjU1OjQ1Iixtb2RpZmllZD0iMjAyNS0w
NC0yNyAxNjo0NzoyMCIsc3RvcmVkPSIyMDI0LTQ4LTA1IDA4OjQ4OjA4Iix3b3Jrc3BhY2VzPXt7
bG9jYXRpb249Im1haW4ubHVhIix3b3Jrc3BhY2VfaW5kZXg9MX0se2xvY2F0aW9uPSJnZngvMC5n
ZngiLHdvcmtzcGFjZV9pbmRleD0yfX1dXWx6NAAEAAAAAwAAADBuaWw=
:: _meta/
:: _meta/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDIzLTEwLTAyIDIyOjU1OjQ1Iixtb2RpZmllZD0iMjAyNS0w
NC0yNyAxNjo0NzoyMCIsc3RvcmVkPSIyMDIzLTU1LTAyIDIyOjU1OjQ1Il1dbHo0AAQAAAADAAAA
MG5pbA==
:: _meta/workspaces.pod
b64$LS0gcGljb3Ryb24gb2JqZWN0IGRhdGEKe3t3b3Jrc3BhY2VfaW5kZXg9MSxjcHJval9maWxl
PSJtYWluLmx1YSJ9fQ==
:: gfx/
:: gfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTEwLTA1IDA3OjI4OjIwIixtb2RpZmllZD0iMjAyNS0w
NC0yNyAxNjo0NzoyMCIsc3RvcmVkPSIyMDI0LTI4LTA1IDA3OjI4OjIwIl1dbHo0AAQAAAADAAAA
MG5pbA==
:: gfx/0.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTI4LTA1IDA3OjI4OjIwIixtb2RpZmllZD0iMjAyNC00
OC0wNSAwODo0ODowOCIscmV2aXNpb249MzUwXV1sejQAswAAAFozAAD-FHtbMF09e2JtcD1weHUA
QyAQEAQQJ1AnIEcwRxAHLgcwBy4HCAAWmdcQ1xAXEFcQFwYA8wfXIEcQR0CXICxmbGFncz0wLHBh
bl94CADneT0wLHNjYWxlPTEyfSyIAF8ICATwMDMA------9OXxAQBPDwMwCGD-8AuQ_YAf8gDzMA
--------------------------------------------------------11A9MTJ9fQ==
:: map/
:: map/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTEwLTA1IDA3OjI4OjIwIixtb2RpZmllZD0iMjAyNS0w
NC0yNyAxNjo0NzoyMCIsc3RvcmVkPSIyMDI0LTI4LTA1IDA3OjI4OjIwIl1dbHo0AAQAAAADAAAA
MG5pbA==
:: map/0.map
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDIzLTU0LTAzIDA0OjU0OjI3Iixtb2RpZmllZD0iMjAyMy01
OC0wMyAwNDo1ODowMSIscmV2aXNpb249MzVdXWx6NABpAAAAowgAAPATe2xheWVyPXtbMF09e2Jt
cD11c2VyZGF0YSgiaTE2IiwxNgMALyIwAQD----voSIpLHBhbl94PTAIAPIGeT0wLHNjYWxlPTEs
dGlsZV9oPTE2CgBvdz0xNn0sSwT-----OFAxNn19fQ==
:: map/map0.map
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTI4LTA1IDA3OjI4OjIwIixtb2RpZmllZD0iMjAyNC0y
NS0wNSAwODoyNTo0NSIscmV2aXNpb249MjE4XV1sejQAXQAAAFgEAADwE3tsYXllcj17WzBdPXti
bXA9dXNlcmRhdGEoImkxNiIsMTYDAC8iMAEA----76EiKSxwYW5feD0wCADyBnk9MCxzY2FsZT0x
LHRpbGVfaD0xNgoAcHc9MTZ9fX0=
:: sfx/
:: sfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTEwLTA1IDA3OjI4OjIwIixtb2RpZmllZD0iMjAyNS0w
NC0yNyAxNjo0NzoyMCIsc3RvcmVkPSIyMDI0LTI4LTA1IDA3OjI4OjIwIl1dbHo0AAQAAAADAAAA
MG5pbA==
:: sfx/0.sfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDIzLTU0LTAzIDA0OjU0OjI3Iixtb2RpZmllZD0iMjAyMy01
Ny0wMyAwNDo1Nzo0MiIscmV2aXNpb249MzRdXWx6NABvAAAA7QYAAN9weHUAAygAAAMABPD-AQDs
-yfxARAGDyAQASABIAHwAAIQAg4QASAPISABMA9A8MMPKA--8MYP_AoP-w_AD-cPDQHwCQEQBg4w
AP85H-8BANzP_A9AAA8QQP--sPBwCwD--6Mf-wEAl1D-----Hw==
:: sfx/sfx0.sfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTI4LTA1IDA3OjI4OjIwIixtb2RpZmllZD0iMjAyNC0y
NS0wNSAwODoyNTo0NSIscmV2aXNpb249MjE1XV1sejQAEAEAAFEHAADwJ3B4dQADKAAAAwAED0AQ
Ag4AAaABIAKgDgAPEAAN8MoBAgMEBQYHAQ--kAgJCgsPDA8NDw4PDxAA8AANDxEPEg8TDxQPFQ8W
DxcTAPEBDxgPGQ8aDxsPHA8dDx4PHxQA8QAgDyEPIg8jDyQPJQ8mDycUAPEAKA8pDyoPKw8sDy0P
Lg8vFADxADAPMQ8yDzMPNA81DzYPNxQA-wU4DzkPOg87DzwPPQ8_Dz8BD--w-wEA6-8nWgEQBg8g
EAEgASAB8AACEAIMEAEgDyEgATAPQPDDDygP--DGD-gKD-8PgA-3Dw0B8AkBEAYMMAD-OR--AQDc
v-gPQAANQP--sPBwCgD--2Qf-wEAl1D-----Hw==
:: bones.lua
--[[pod_format="raw",created="2024-32-05 07:32:38",modified="2024-25-05 08:25:45",revision=244]]
--[[

	

]]

function bone(x,y,a)
 local l =7
 local b=66
 
 a+=1/28
 a%=1
 local q= flr(a*4) -- 0..3 -- which group of 7
 local ofs={[0]=
  1,5, 5,5, 5,1, 1,1
 }
 
 --line(x,y,x+cos(a)*l,y+sin(a)*l, 14)

 local i=flr((a%0.25)*28)
 b = flr(a*28)
 x-=ofs[q*2+0]
 y-=ofs[q*2+1]

 spr(b,x,y)
 
end


function draw_skelly(s)

	local a=s.pose
	local sx=0
	local sy=0
	local x,y
	local l=7
	local ll=8 -- leg length

	pdat={[0]=
		{7,-6,7},
		{-8,-6,7},
		{3,6,8},
		{-4,6,8}
	}

	--circfill(s.x, s.y, 2,8)
	
	-- calc lowest foot

	lx = 0
	ly = sy + 10 -- hip bone
	li = 0
	for i=2,3 do
		local d=pdat[i]
		local x=sx+d[1] 
		local y=sy+d[2]+0 -- hip

		x+=cos(a[i*2])*d[3] 
		y+=sin(a[i*2])*d[3]
		x+=cos(a[i*2+1])*d[3] 
		y+=sin(a[i*2+1])*d[3]

		ly = max(ly,y)
		if (i==2 or ly==y) then
			lx=x
			li=i
		end
	end
 
	-- adjust
	sy -= (ly - 22)


	if (not s.llx) s.llx=0
	if (s.ci != li) then
		-- plant anchor foot 
		-- .cx means anchor relative to starting position (not 'center')
		s.cx = lx + (s.cx - s.llx)
		s.ci = li
	end
	 
	s.llx=lx -- last lowest x
	sx -= (lx - s.cx)
	sx += s.x
	sy += s.y
 

	-- body
	spr(40,sx-8, sy-8)

	-- regular head
	spr(32,sx-3+s.hx,sy-14+s.hy)

	-- bunny head (easter)
	--spr(43,sx-3+s.hx,sy-14+s.hy-8,1.25,2)
	
	for i=0,3 do
		local d=pdat[i]
		x=sx+d[1] y=sy+d[2]

		bone(x,y,a[i*2],i*2+0)

		x+=cos(a[i*2])*d[3] 
		y+=sin(a[i*2])*d[3]

		bone(x,y,a[i*2+1],i*2+1)

	end

end



:: main.lua
--[[pod_format="raw",created="2023-05-28 07:05:12",modified="2024-48-05 08:48:08",revision=170]]
-- disco skull 2
-- by zep
-- skull sprite
data={252,254,255,255,231,195,195,195,199,255,127,126,248,248,152,152}
-- 2d rotation
local function rot(x,y,a)
	return cos(a)*x-sin(a)*y, cos(a)*y+x*sin(a)
end

function _draw()
	--printh("_draw() start "..stat(1))
	cls()
	
	local tt=t()
	local r0 = 5+cos(tt/5)*4
	local y_offset = .5+cos(tt*.11)*.5
		
	for i=0,5 do
		p=i\3
		
		-- decide which bitplanes to read/write
		--poke(0x5509, (1<<i%3) | (0x10 * p))
		local planes =  (1<<i%3) | (0x10 * p)
		
		a2=t()-i%6/20
		
		local bmp = get_spr(0)
		for i=0,255 do
			local x=i&15
			local y=i\16
			-- i%16 is the spr pixel x
			-- i/16 is the spr pixel y
			--if(x>7) x= 15-x -- rhs of sprite
			--if data[1+i\16]&(1<<x)>0 then
			
			local col = bmp:get(x,y)
			if (col == 14) then
				poke(0x5509, planes | 0x8)
			else
				poke(0x5509, planes)
			end
			
			if col > 0 then
				-- rotate in object space
				local x,z=rot(i%16/8-1,0,a2/4)
				local x,y=rot(x,i/128-1,cos(tt*.1)*.0833)
				y-= y_offset
				-- move 
				z += 2+cos(tt*.142)
				
				-- dot is above surface
				if y<.5 then
				
					-- on reflection pass, reflect
					-- through ground plane (at 1)
					if (p==0) y = 1-y
					
					-- perspective projection into screenspace (sx,sy)
					local sx = 240 + x * 128 / z
					local sy = 135 + y * 128 / z
					
					-- r: radius of dot
					-- i%16/9+i/99 for stripes
					-- +a2 to vary stripes offset
					local r = (r0+cos(i%16/9+i/99+a2)*2) / z
					
					-- draw the dot
					circfill(sx,sy,r,31)
					
					--circ(sx,sy,r*1.5,15)
				end
			end 
		end
	end
	--rectfill(0,0,50,10,16)
	--print(string.format("%.3f (%d fps)",stat(1), stat(7)),2,2,15)
	--printh("_draw() end "..stat(1))
end
function _init()
	-- palette
	for i=0,31 do
	
		local r = (i>>0)&1
		local g = (i>>1)&1
		local b = (i>>2)&1
		local p = (i>>3)&1
		local q = (i>>4)&1
		
		q0 = (q * 1.5) + 0.5  -- 0.5 or 2.0
		q1 = (q * 1.0) + 1.0  -- 1.0 or 2.0
		
		if (p > 0) then
			local tt = 0.3
			r = 1.0 * tt + r * (1-tt)
			g = 0.3 * tt + g * (1-tt)
			b = 0.8 * tt + b * (1-tt)	
		end
		
		
		val =  flr(b * 127 * q1)
		val += flr(g * 127 * q0) << 8
		val += flr(r * 127 * q0) << 16
		
		poke4(0x5000 + i * 4, val)
		
		-- scanline colour
		val =  flr(b * 110 * q1)
		val += flr(g * 100 * q0) << 8
		val += flr(r * 100 * q0) << 16
		
		poke4(0x5100 + i * 4,val)
		
	end
	
	-- scanlines
	for i=0,68 do
		poke(0x5400+i,0x11)
	end
	
end



:: pose.lua
--[[pod_format="raw",created="2024-49-05 07:49:57",modified="2024-25-05 08:25:50",revision=180]]


function defpose()
	return {[0]=
	  0.7,0.9,
	  -0.3,-0.4,
	  0.85,0.75,
	  0.65,0.75,
	  0
	 }
end

function makepose(n)

 n=flr(n)
 

	local pdat={[0]=
	
	 -- def
	 {[0]=
		  0.85,0.75,
		  -0.3,0.75,
		  0.85,0.7,
		  0.65,0.7,
		  0
		 },
		 
	 -- 1. arms down
		{[0]=
		  0.80,0.90,
		  0.70,0.60,
		  0.95,0.95,
		  0.55,0.85,
		  0
		 }, 
		 
		-- 2 russian
		-- (arms wave)
		{[0]=
		  0.20,0.35,
		  0.45,0.60,
		  0.95,0.95,
		  0.55,0.85,
		  0
		 }, 
		
		-- 3 stompy
		-- (arms open -- hey ho)
		{[0]=
		  0.0,0.15,
		  0.35,0.25,
		  0.75,0.75,
		  0.45,0.65,
		  0
		 },
		 
		-- 4 arms up
		{[0]=
		  0.25,0.35,
		  0.25,0.15,
		  0.75,0.75,
		  0.6,0.6,
		  0
		 },
		 
		
	}
	
	n=n%(#pdat+1)

 local p={}
 for i=0,8 do
  p[i]=pdat[n][i]
 end

	return p
end



-- chase pose
function chpose(p0,p1,q)
 for i=0,7 do
  local a0=p0[i]
  local a1=p1[i]
  a0%=1 a1%=1
  if (abs(a0-a1)>0.5) then
   a0+=sgn(a1-a0)
  end
  a0=a0*(1-q)+a1*q
  p0[i]=a0%1
 end
 
 -- head
 p0[8]=p0[8]*(1-q)+p1[8]*q
end


function flip_pose(p)
 for j=0,1 do
  for i=0,1 do
   p[j*4+i+0],p[j*4+i+2]=
   p[j*4+i+2],p[j*4+i+0]
  end
 end
 for i=0,7 do
  p[i]=(0.5-p[i])%1
 end
 
-- p[8]*=-1
 p[8]=0x0.ffff-p[8]
 
end



:: [eoc]
