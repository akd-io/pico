picotron cartridge // www.picotron.net
version 2

:: gfx/
:: gfx/0.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDIzLTEwLTE2IDA2OjMyOjE4Iixtb2RpZmllZD0iMjAyNS0w
My0zMCAwMTozNDoxOSIscmV2aXNpb249MjY1Nl1dbHo0AJAQAABzUAAA8xd7WzBdPXtibXA9cHh1
AEMgBQEEAAENBgcsZmxhZ3M9MCxwYW5feAgAy3k9MCx6b29tPTh9LDQAbw8SDw4PFzcAGl8QEATw
8DEACy0xNDIA3gD-EgHXHge-DgceB70EAP8I1x4XjxcnHheMFwwetwwOAA68DhDO8ANnAB__8QHX
EQe-EgcRB74EAP8G1xEXjw4nEReNFw0Rtw0BAAG9ARDBZgAf8BEgkUABlwEgAQedBwEAAQc9Nz0H
EQctFx0XLQcRBx13HQYAPycdJwgAAQQmAAE0AP8GBgedBwYRFpcWAQABtgEgAZYBQJEgjQAPD-cB
Hgs1ANANAwQGFw8aCwwPHA8d-wH-FQ8PCQoNDxIDDxEPGw8QDxYPHggPGAQPGQ8fABEfExUSHxQf
FYoBHvMFAxcANwAXQAeQByAHsAcQB7AH8AIJABwQEQBRIAeQB0AwAA-zASAf8DIAggKJAvAEHxIK
jgcRB0oeGA4YBxEHDiouSAcAzwoOCj4oDgcRB44IHpoCCg_pAEx8FAoE8DAGBwwCTnANDxIMAmGA
AQ8TEwUNAi-wRGcADB8xZwAADXMCH2B0AgMVcHQCL-BDZwAa-wQQEAT2NR8R9g4d9g4fHRYfF-Zl
QAEfDzIA-0vvCVGAAS0vDwEAYS0_Ed4CAAFPAQDRAFcAIt8vHi8XAQBhLx4-FxHeWgA2AsYDL70H
BAACALQD7x0nEReOFw4Rtw4BAAG_tAMi-woAkVABdwYBQAF3FgEwAXcmASABdzYBEAG3BAATD9YA
H5AQoTABqQEQAQcGABARCgA-uQEADgAM7pkRELEHARARlwkBIAGZqAYPdgATEaR2AECkARARCgA-
tAEADgAMFJR2AF8EASABlHYAIW-xAR6XHhEEAAUCGwKDLoEeES4BNzEGAEEBAAEeCAAvENEZCCYh
nxIaCAd7CA8EAAGhDx0HngcNER2XHfEFPyABneMAIS-w8DIA-0twEdEAEbch1_4D6Z0XEQcNEQ0W
AQYNEQ0HDAAAHADP1xHdET1RPQEA0fARmQAfDzIA----Cz8BAQTiDBv-BgwBBA8XDx0KDw8PGg8c
Bg8ODAkIC0IAHv8FHw8WBQ8SDQ8eDxAPGQQPGA8bDxFFAB1QBwAfFRHNCh8TOgAa-wAkEAR3Pxc-
HTp-Dz8aPxwMABG-PxY2Pw48OT8fOHsLAA7-ADU9Px4-ED8ZND8YPxs-EQ8AGq8wMT8SPxM-FHJz
CgALD-AACx82EwIdHzgxAF-xPGASABKQAg8XBwIOAoACDhcCDw4HAmACDicNFwJQAg4fD14CQAIu
Bw4HDgceAiACDQ4HDR4NDj0CEAINHh0OHR4dAhACHQ4dLg0eDQoA4A0eAQ4NDgECABIOTQEOAgBQ
AhACBw4ZAGENHiESBjcJAN8BIAI2ZwIwQkYCcGIg4wAd9yIBCeAZ0CnAObBJoFmQKQ8ZKYApAA4p
cCkQDilgKSAOKVApMA4pQAkPESkNKQ0ZMAkNAgBPIM7wAnAAHfEjEh8TEF8RQD8TBx8RDxwPER8c
DxMgHhAHDxwfES8cHxEOEB4ABx8cDxE-HC8RDgAuBw8MABBPDADwCx1PHD0OEC5cDgwNDA4QBz4s
DR4cDhAHHY4NBgD-DDwdHh0OIA0MDSwdDh0OQA1cHQ5gDVwOgE0OMKUAHPAIAQMPGhEOIQMBDgED
DgETDhMOAwEHAQMIAPEBXgEXAV4BAw4RDgEHDx0PEiMAEREQAPAnPREDET4RHQE9AQcRAw4BBw0P
HSEdDBcRAwEHDQwHDCEMFwwBHgENDActAQwXEQATAQwHLQcMLACAAwEDAT0HDB1kACIBDgsAYQwB
LhEHLQkAcAADDhEnHUF-ALMOARwRngEDIQ4RDp4AD4ABHfIXArcgBx0vEE8eHQcQHT8QXx4dEA0v
EF8SHx4PDg0QDR8QbxIPFh8LADRfEh8LAGE-Ej8WHx8LADIvEk8LAHIPEQ8QHxJfDQBgLxFfFg8P
CwDwAx0vET8aLw8dEC0PEV8aDw8tEKoKH7ErAh6TMFhwmEC4IBgAAgDyGRDoECgQGBAoQAhwCPAI
Dx5ADpAOIA6QbnAeAC4AHlCuQA4AbgAOQA4EAF9wHgAeUHIAHABxDBGmcQzRpgEQERZXJgEQASZn
FlkMUFYHBgcWFgBAJwYnFhgAQQcGB1YaACAWZxgAICZXFgARthIAFJaFDB8GoxMTHzgMEmINdgDy
DGARABGQARcBBwGAAScBBgcBYAE3BhcBUAGHAaUMYAYXBhcGB2oOYAYXFgcWF-IAcRYHFicGFwYK
ANEGFwEHBgcRABEHRgEHAgAwEAEXFwBQBhdBBkcHAN8BIAE2ZwEwQUYBcGEgvwVO8DISERBdQDEH
HQYNFgEgERAHBh0mHQEQEQAHFg02LQEAIQcGDTZNAQAhHUY9ARAhVgEGDQYBEAcxJg0RFgEQBx2B
DQYA-ws2HREdASANBg0mHQEdAUANVh0BYA1WAYBNAVcEHQbsDRUW7A02DjduBgBQBw5HLhcOADA_
Bw4IAEMXHgcuCgAyLgdO6wE_BgeeAhYPiQAmFRGJAN8uFx4XLgcRBx4XPhceCAAIBCgAD4sAPh8e
FAEnLw8XFg8BD-0DIBGs-QPQrAEQERxXLAEQASxnHJUAYAFcBw4HHBYAQCcMJxwYAEEHDgdcGgAg
HGcYACAsVxYAEbwSABSc-QNfDAEgAZwTASofGRMBJ94JB54HCREZlxkBAAG5gREPiQASMkBhcPMD
8AABUAEGFyYXBgEwAQYnJiftA8AGJ0YnBgEAARYXRhcAAkAGFwZNKgATABoAACMEIEYXAAUQpjYA
UQcGLQYHSABwByYHBgFwESgEEZBxA3_gAS0BoEFAOAIsOD43PsUCEXezAj8nHicIAAEEJgABNAAP
PAIyBo4AFRCzAQWMAAtBAwwIAAQoALC_BxEMB54HDBEcl3UCH7w_Ai4dH4sADQgAEVcGAFYHDhcO
BxAAH74VAT4WG4oAECekAggIAGFeBxEHXicMACkXDggAD2IEPgZiEw9PAx4OeBMP7ASqD4oAAQ_b
ARwvDw6IADAAYgTwDQ4XDhcOAVABDhcuFw4BMAEOJy4nDgEQAQ4nTicjF0AeF04XYhVQDhcOTxIr
ABMAGwCwEAEOF04XDgEgAa43AFEHDi0OB0kAADUBAGMEQQ4HEZBADQ9jBCMCfBgQKnsYPzoR2gIA
AQ4hGA9VABQQKVUAPzkR2QIAAQ9VACYvLxcmGSofOCUZBRIOJRk-DhHeWQA6nxAsAQBhLjwR3AIA
AQ8FAScfHAUBQD8tLx1WADsA_ALwDwgXCBcIAVABCBcoFwgBMAEIJygnCAEQAQgnSCcPGOYCUAYX
SBcG8AJwCBcNQg0XCAoAMidPDiYA0RdIFwgBIAEIDgZIBg5AAFEHBiIGB1IAQAcsBwgBAxAIAQN_
CAIIAaABIgEDD54DEyQHD6ADIwcNoQMjBx2iAyMXDaMDJgcNpAMTDaQDIxcNpQMpBw2mAzEsDg1P
ADANLg2mAzANDg2mAxAMpgMeLKYDDxYMPw8hBzMfDyEHcy8PFogAORGUhwB2tAcRBwQ3ZAYAUAcE
RyQXDgAwNAcECABDFxQHJAoAcSQHRAcRB7SXBjCUBw4jGwHWHD8gAZ76CjQNkwEPmwEHD-oKNw8S
AQAgJCfuAAgIAGFUBxEHVCcMACkXBAgAT7QHEQ4PAQEPJgRNMwZCBiYEH0glBBAfKCUEAw_lAE4v
TxKmABAfLaYAO-AJMIFQARgXCBcYATABGBcoFxgBEAEYJygnnQAPpgB3D6sKAQ34Ag8AAwcPqwo4
ATABQR8XCB4xARMeMQETLjEBEy4xAXANDw4eSA4XcRJSCB4MTQwxAVEuSA4HDjMBMR5IHjMBUQ0M
SAwNMwFRDgwtDA4zATAOKA4zAT8OCA7ZAS8HqQATHqkAEy6pABYuqQAVLqgAEx6oAB8upgBVC-8n
gQ0BFgEdARYBEh5EARYBFgwAUQYXNhcGCgA5MR0xCABRFxYXFhcKAHsBBhEWEQYBDAAPGSgCDyUD
QgEJAwIlAz8ITggkAwQTaCIDPwguCMgDPvMHHxwXDhceATABHhcuFx4BEAEeJy4nHhcMIA8Q7wFh
DBdOFwwNhggAlwIPNAwBYg4NDE4MDdAIPwwtDDoMAS8CDhQFKC8PHNgMAw_mAD4P4AwmAKYAIAwX
lhjyBlABDBcsFwwBMAEMJywnDAEQAQwnTKUAQQwOF0zbCXEMF24XDAEAGgABIgAwF0wX4hJBDA5s
DjoAUQcMLgwHTABABywHDKAAEAygAH8MDgwBoAEu2glRAdEAMRoMGoUAMRosGpcAMSosKq8AMypM
KtEAMRpMGtEAMRpuGtEAIipMIgA5Gkwa0QBRCgwuDApMADAKLArRAD8KDArRAFsMEAaQDgEfDgEe
AR0B-RcgDgGQFgMMAFENFz0XDQoAOTEeMQgAURcdFx0XCgB7AQ0RHRENAQwALw8ddRIwAJcDHx6W
AwkRHoUFHxfxAgcBDAMB8QITbu8CDs8PD5UDK-ESYBHAARcBsAEXAaABNwFAUTdh1xEGJw03DScG
ERYXDTcNyBQwFncW6RgxJx0nYCf-EwFAATcWNwEwARdWFwEwAQcmESYHATABFhEQERYBMCFQIRCG
AB3xER8VwA4XDrAOFw6gDjcOQF43btceDxknDx83DScJHh8ZigD-KBkOAA4cdxkOIA4MJx0nCQ5A
DncOQA43CQw3DjAOFyksFw4wDgcpHiwHDjAOGR4QHhwOMC5QLhCWBisApCgSbZEuRUEXAR0OADAt
F20UAEUBF0EdDgAfvXIGMw8SGQERbt8IVR5BFwEeDgAgLhcgE1UeARdBHg4ADx8UNMfxAR2XHREd
BwFXAQcIAAAUAAGLAWIdER0nPScSABHdAgCIHZEdER0xRwEGAF8NAQDREHoAHlEZlxkRGXIABwgA
ABQAshcJNwkXGREZJzknEgACHBKIGZEZERkxRwEGAB4JegAPaAoiID4XaQ4gThdnFDVeFz4GAAIS
AAIeAA9zATQALgQxDx4P_RMYDzMEEQ0kBwAhBF8NJ04nDTQEBQIdAAY0BJENHE4cDQEwAQ00BJ8N
AVABDQcuBw00BAEPqgDGL-DwMQD---0Psi5RD3UAAhGudQBArgEQEQoAP74BAA4ADBSedQAfDiYS
JAB1AC_vF3YAYh8RdgBdL-DwMQCvsABhgAEfHCcBgAEeBQDwA04BgCEPECGgAQ0BIFEwAQ1BHmkK
EV0GAFQNQT4BMBkALwHAIwAAb2E_AZBRAGcVMCAedloJYR4GCBYRFgoAUiYRBwEGCgASMQgAEzYa
AC92HmkVNy-w8DEA-xIPOR6AEZiJAHa4BxEHCDdoBgBQBwhHKBcOADA4BwgIAEMXGAcoCgAgKAe9
JhG4iQAemBwXD0QBTTHxAR-EMwFnCwcIAAAUALgXDjcOFx4RHic_J_YziB6RHhEeMUcBBgAfDukL
mk-xAR8X9QBmHx56AAoxDg8XfAD-Ah0RHpcdEZ4tDhGOLR4Rfi0uggA2L-DwVCSzEZuNAPACOzc7
BxEHKxcbFysHEQcbdxsGAD8nGycIAAEEJgABNAA-Bgebsg0uL-DwMQD---------------------
LVBtPTh9fQ==
:: gfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDIzLTEwLTE2IDA2OjMxOjUyIixtb2RpZmllZD0iMjAyNS0w
NS0xMyAxMTo0ODoxNSIsc3RvcmVkPSIyMDIzLTMxLTE2IDA2OjMxOjUyIl1d
:: map/
:: map/0.map
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDIzLTEwLTE2IDA2OjMyOjE4Iixtb2RpZmllZD0iMjAyNS0w
My0zMCAwMTozNDoxOSIscmV2aXNpb249MjMxN11dbHo0AFsAAABWBAAA8Ah7e2JtcD11c2VyZGF0
YSgiaTE2IiwxNgMALyIwAQD----v8QgiKSxoaWRkZW49ZmFsc2UscGFuX3g9MAgAwnk9MCx0aWxl
X2g9MQkAwHc9NSx6b29tPTR9fQ==
:: map/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDIzLTEwLTE2IDA2OjMxOjUyIixtb2RpZmllZD0iMjAyNS0w
NS0xMyAxMTo0ODoxNSIsc3RvcmVkPSIyMDIzLTMxLTE2IDA2OjMxOjUyIl1d
:: sfx/
:: sfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDIzLTEwLTE2IDA2OjMxOjUyIixtb2RpZmllZD0iMjAyNS0w
NS0xMyAxMTo0ODoxNSIsc3RvcmVkPSIyMDIzLTMxLTE2IDA2OjMxOjUyIl1d
:: gui.lua
--[[pod_format="raw",created="2023-10-22 10:17:57",modified="2025-03-30 01:34:19",revision=2629]]



function create_infotext(el)
	el.width=140
	el.height=7
	el.vjustify="bottom"
	el = gui:attach(el)
	function el:draw()
		local l = el.label
		if (type(l) == "function") l = l()
		color(el.col)
		print("\014"..l,0,1)
	end
	return el
end

function generate_gui()
	
	gui = create_gui()
	
	if mode == "view" then
	
		gui:attach_button{
			x=-10,y=-4,
			justify="right",
			vjustify="bottom",
			label = "Edit",
			border=0x0e12,
			tap = function()	
				mode = "edit"
				generate_gui()
			end
		}


		-- icon
		
		gui:attach{
			x=10,y=8,
			width=17, height=17,cursor="edit",
			draw = function(self,msg)
				local x,y=0,1
				if (meta.icon and msg.has_pointer) then
					memmap(shadow_pal,0x8000)
					spr(meta.icon,0,1)
					unmap(shadow_pal,0x8000)
					x,y=1,0
				end
				
				if (meta.lowcol_icon and meta.icon) then
					memmap(icon_pal,0x8000)
					spr(meta.icon,x,y)
					unmap(icon_pal,0x8000)
				else
					spr(meta.icon or get_spr(8),x,y)
				end
			end,
			tap = function()	
				mode = "icon"
				generate_gui()
			end
		}	

		-- info

		local attribs, size, origin = fstat(fn)
	
		local yy = -42

		local is_sandboxable_cart = fn:ext() and fn:ext():split(".")[1] == "p64"
		if (fn == "/ram/cart") is_sandboxable_cart = true -- special case; normally don't want to sandbox plain folders
		if (fn:sub(1,8) == "/system/") is_sandboxable_cart = false
		if (not is_sandboxable_cart) yy += 14 -- don't need the last 2 lines

		create_infotext{col=18,x=10,y=yy,label=(fn or "?")} yy += 7
		create_infotext{col=13,x=10,y=yy,label=(size and (size.." bytes on disk")) or "-"} yy += 7
		create_infotext{col=13,x=10,y=yy,label=meta.created and date("%Y-%m-%d %H:%M:%S", meta.created) or "[no date_created]"} yy += 7
		create_infotext{col=13,x=10,y=yy,label=meta.modified and date("%Y-%m-%d %H:%M:%S", meta.modified) or "[no date_modified]"} yy += 7

		
		-- for carts: show bbs id (if there is one) and sandbox toggle
		if (is_sandboxable_cart and fn:prot() == "bbs") then
			-- show id and read-only sandbox info 
			local bbs_id = fn:basename():split(".", false)[1]
			--create_infotext{col=18,x=10,y=yy,label="[bbs_id: "..bbs_id.."]"} 
			yy += 7
			create_infotext{col=18,x=10,y=yy,label="[sandboxed]"}  -- always sandboxed because bbs:// -- just to avoid confusion
			yy += 7
		elseif (is_sandboxable_cart and fn:prot()) then
			-- some other protocol?
			-- no other protocols currently support running a cartridge
		elseif is_sandboxable_cart then
			-- local cart
			if (meta.bbs_id) create_infotext{col=18,x=10,y=yy,label="bbs_id: "..meta.bbs_id} 
			yy += 7

			-- sandbox status

			local el = create_infotext{col=18,x=10,y=yy,
				label=function()
					if (meta.sandbox == "bbs") return "\fi[/] sandboxed"
					return "\fd[ ] sandboxed"
				end
			} yy += 7

			el.tap = function(self)
				if (meta.sandbox == "bbs") then
					meta.sandbox = false -- can't overwrite nil with store_metadata!
				else
					meta.sandbox = "bbs"
					if (not meta.bbs_id) then
						meta.bbs_id = "_dev"..flr(rnd(10000))
						generate_gui()
					end
				end
				sync_metadata()
			end

			el.cursor = "pointer"
		end
	
	end
	
	if mode == "icon" then
		gui:attach(create_icon_editor())
		gui:attach(create_palette_chooser())
		
		gui:attach{
			x=128,y=36,width=64,height=10,
			cursor="pointer",
			draw=function()
				local str = "\014\fi[/] low-colour"
				if (not meta.lowcol_icon) str = "\014\fd[ ] low-colour"
				print(str,x,y)
			end,
			tap=function()
				meta.lowcol_icon = not meta.lowcol_icon
				generate_gui()
			end
		}
		
		-- presets / templates
		for y=0,1 do
			for x=0,3 do
				gui:attach(create_preset_button{x=120+x*20, y=54+y*20+6, index=x+y*4})
			end
		end

		-- preview
		gui:attach{
			x=5,y=105,width=110,height=24,
			draw=function(self,msg)
				-- themed preview (grayscale values)
				memmap(lowcol_pal,0x8000)
				spr(bmp, 4, 2) 
				unmap(lowcol_pal,0x8000)
				
				-- colourful sprite
				if (not meta.lowcol_icon) then
					pal()
					spr(bmp,24,2) -- colourful sprite
				end
				pal()
				
				if (msg.has_pointer) then
					if (msg.mx < 20) then 
						print("\014low-colour\npreview",48,4,13)
					elseif (msg.mx < 40 and not meta.lowcol_icon) then
						print("\014full-colour\npreview",48,4,13)
					end
				end

			end
		}
		
	end
	
	if (mode == "edit") then
	
	function create_field(label, key, x, y, height)
	
		-- label
		gui:attach{
			x = x-30, y = y+4, label = label,
			width = 40, height = 13,
			draw = function(self)
				clip()
				print("\014"..self.label, 0,0, 5)
			end
		}
		
		local texted = gui:attach_text_editor{
			x = x, y = y, key = key,
			width = 172, height = height or 13, -- width was 160; 0.2.0b: 172
			block_scrolling = true,
			max_lines = 2,
			
			key_callback = {
				enter = (not height) and function () 
					-- keep new value and close
					--newval[key] = texted:get_text()
				end,
				escape	 = function()
					-- close without keeping value
					-- 
				end,
			}
		}
		
		if (meta[key]) texted:set_text(meta[key])
		texted.key = key
		--printh("added text field with key: "..tostr(texted.key))
		return texted
	end
	
	-- fields
	local xx=34
	field = {
		create_field("title  ", "title", xx, 10),
		create_field("version", "version", xx, 25),
		create_field("author ", "author", xx, 40),
		create_field("notes  ", "notes", xx, 55, 26+14),
		
	}
	
	
	
	end
	
	-- Cancel, Save buttons shown in both editing modes
	if (mode ~= "view") then
		
		gui:attach_button{
			label = "Save",
			x=-10,y=-4,justify="right",vjustify="bottom",
			--bgcol=0x070d,
			border=0x0e12,
			tap = function()
			
				if (mode == "icon") then
					meta.icon = bmp:copy()
				else
					for i=1,#field do
						meta[field[i].key] = table.concat(field[i]:get_text(),"\n")
					end
				end
				
				sync_metadata()
				mode = "view"
				generate_gui()
				
				-- let filenav know (incase icon changes)
				send_message(2, {
					event = "broadcast",
					msg = {
						event = "filenav_refresh"
					}
				})
				
			end
		}
		
		gui:attach_button{
			label = "Cancel",
			x=-45,y=-4,justify="right",vjustify="bottom",
			--bgcol=0x070d,
			border=0x0e12,
			tap = function()
				undo_stack:checkpoint()
				sync_metadata()
				mode = "view"
				generate_gui()
			end
		}
		
		if (mode == "edit") then
			gui:attach_button{
				label = "Edit Icon",
				x=10,y=-4,justify="left",vjustify="bottom",
				--bgcol=0x070d,
				border=0x0e12,
				tap = function()
					mode="icon"
					generate_gui()
				end
			}
		end
	end
	
end

:: icon.lua
--[[pod_format="raw",created="2023-10-25 08:45:20",modified="2025-03-30 01:34:19",revision=2167]]
--[[

	specialised icon editor
	just for about box

]]

-- copypaste from filenav.p64/icon.p64


-- match table in about.p64 icon designer
local lowcol_table = 
{
	  1,1,13, 13,1,6,7,
	13,6,6,6, 6,13,6,6,
	13,13,13,1, 1,1,13,6,
	13,13,6,13, 6,6,13,13
}
local theme_index = {
	[7] = "icon0",
	[6] = "icon1",
	[13] = "icon2",
	[1] = "icon3"
}
local theme_index_buried = {
	[7] = "icon1",
	[6] = "icon2",
	[13] = "icon3",
	[1] = "icon3"
}

-- need to call each time theme changes
function generate_icon_palettes()

	pal()
	for i=1,31 do
		pal(i, theme(theme_index[lowcol_table[i]]))
	end
	icon_pal = userdata("u8",4096)
	icon_pal:peek(0x8000)

	pal()
	for i=1,31 do
		pal(i, lowcol_table[i])
	end
	lowcol_pal = userdata("u8",4096)
	lowcol_pal:peek(0x8000)

	pal()
	for i=1,31 do
		pal(i, 13)-- mode == "desktop" and theme"desktop_shadow" or 6)
	end
	shadow_pal = userdata("u8",4096)
	shadow_pal:peek(0x8000)

	pal()
end



function create_preset_button(el)

	el.width=16
	el.height=16
	el.bmp=get_spr(24+el.index)
	
	function el:draw()
		spr(self.bmp, 0, 0)
	end
	
	function el:click()
		blit(self.bmp,bmp)
	end
	
	return el
	
end


function create_palette_chooser()

	local el
	
	if (meta.lowcol_icon) then
		el = {x = 110, y = 10, width = 19*5, height = 14, colbmp = get_spr(6)}
	else
		el = {x = 112, y = 6, width = 13*7, height = 3*8, colbmp = get_spr(7)}
	end
		
	function el:draw(msg)
		clip()
		rectfill(-1,-1,self.width,self.height,0)
		local colbmp = self.colbmp
		sspr(colbmp,0,0,nil,nil,0,0,self.width,self.height)
		
		local hh = self.height \ colbmp:height()
		local ww = self.width \ colbmp:width()
		local drawn=false
		for y=0,2 do
			for x=0,colbmp:width()-1 do
				if (col == colbmp:get(x,y) and not drawn) then
					local sx = x * ww
					local sy = y * hh
					local ww1=ww
					if(colbmp:get(x+1,y)==col) ww1+=ww
					rect(sx,sy,sx+ww1-1,sy+hh-1,0)
					rect(sx-1,sy-1,sx+ww1,sy+hh,7)
					drawn=true
				end
			end
		end
		
--		print("\014[ ] colourful",20,28,13)
--		print("\014-- templates ---",18,38+6,13)
	end
	
	function el:drag(msg)
		local colbmp = self.colbmp
		local x = msg.mx * colbmp:width() / self.width
		local y = msg.my * colbmp:height() / self.height
		
		col = colbmp:get(x,y)
	end
		
	return el
end



function create_icon_editor()

	local ed = {
		x=6,y=6,
		width=96,height=96,
		cursor="crosshair"
	}
	
	-- global
	col = 7
	
	
	
	local bmp_width = bmp:width()
	local bmp_height= bmp:height()
	if (meta.icon) blit(meta.icon, bmp, 0, 0, 0, 0)
	
	function ed:click(msg)
		undo_stack:checkpoint()
		if (key"ctrl") then
			local x = msg.mx * bmp_width / self.width
			local y = msg.my * bmp_height / self.height
			local col0 = bmp:get(x,y)
			for i=0,#bmp-1 do
				if (bmp[i] == col0) bmp[i] = col
			end
		end
	end

	function ed:draw(msg)
		clip()
		rectfill(-1,-1,self.width,self.height,0)
		
		if (meta.lowcol_icon) pal(lowcol_table)
		sspr(bmp,0,0,16,16,0,0,self.width,self.height)
		pal()
	end
	
	function ed:drag(msg)
		local x = msg.mx * bmp_width / self.width
		local y = msg.my * bmp_height / self.height
		if (msg.mb > 1) then
			col = get(bmp,x,y,col)
		else
			set(bmp,x,y,col)
		end
	end
	
	
	return ed
end



function icon_editor_update()
		
	if (key"ctrl") then
	
		if (mode == "icon") then
			if (keyp("v")) then
				local c,m = unpod(get_clipboard())
			
				if (type(c)=="userdata" and c:width()==16 and c:height()==16) then
					meta.icon = c
					blit(c,bmp)
					sync_metadata()
				end
		
			end
		
			-- copy icon
			if (keyp("c")) then
				local bb = bmp or meta.icon
				if (bb) then 
					set_clipboard(pod(bb),{pod_type="image"})
					notify("copied icon")
				end
			end
			
			if (keyp("z")) undo_stack:undo()
			if (keyp("y")) undo_stack:redo()
			
		end
	
	end
end


function icon_init()
	bmp = userdata("u8",16,16)
	
	undo_stack = create_undo_stack(
		function()
			return bmp
		end,
		function(s)
			blit(s,bmp)
		end
	)
	
	on_event("modified:/ram/shared/theme.pod", function()
		generate_icon_palettes()
	end)
	generate_icon_palettes()
end
:: main.lua
--[[pod_format="raw",created="2023-10-16 06:32:18",modified="2025-03-30 01:34:19",revision=2657]]
--[[

	a7: easy access to 1,13,6,7 palette?
	    ** only needed if do auto colour detection thing **
	    
	   --> better: [/] always themed
	       (can work in with preview interface)
	       
		how to say it?
		
		[/] colourful // means not force_themed! (noice)
		    -> can put under palette and view different palette

	about.p64
	general purpose metadata viewer and editor
	
	future: calculate total size of folder
	future: manage current cartridge (Cartridge Info from picotron menu)
	future: system info (when inspecting /system)
	future: multiple files and flip through them (e.g. CTRL-A, CTRL-I)
	
]]

include "icon.lua"
include "gui.lua"

-- view, edit, icon
mode = "view"




function sync_metadata()

	if (meta) store_metadata(fn, meta)
	meta = meta or fetch_metadata(fn) or {}
	--printh("[about] fetching metadata for file: "..fn.."  // path:"..pwd())
	
end

bunny = userdata"[gfx]101000000000000000000001111111111000001dddddddddd10001d1111111111d101d111111111111d11d111771177111d11d111771177111d11d111771177111d11d111777777111d11d111717717111d11d111777777111d11d111111111111d101d1111111111d10001dddddddddd10000011111111110000000000000000000[/gfx]"

function _init()
	
	cls(7)
	
	poke(0x4000,get(fetch"/system/fonts/lil.font"))
	poke(0x5600,get(fetch"/system/fonts/p8.font"))
	poke(0x5602,6) -- to do: should be standard for p8.font
	
	cd(env().path) -- can use from terminal
	fn = env().argv[1] or env().prog or "/ram/cart"
	
	--printh("[about] initial fn: "..fn)
	fn = fullpath(fn)
	
	local segs = split(fn,"/",false)
	fn_short = segs[#segs]
	fn_path  = string.sub(fn, 1, -#segs[#segs] - 2)

	cd(fn_path) -- same path as the file or folder in question
	
	--printh("[about] changed to fn_path: "..fn_path)

	sync_metadata()
	
	window{
		width = 212, -- 0.2.0c: 210 (was 200)
--		height = 108,
		height = 128, -- 0.2.0c: 128 (was 116)
		title = "About"
	}
	
	icon_init()
	
	generate_gui()
	
end

function _draw()
	cls(6)
	
	if (mode == "view") then
	--rectfill(0,0,1000,32,7)
	
	-- sprite handled by gui element
	--spr(meta.icon or get_spr(8),10,8)
	
	local title = meta.title
	if (type(title) ~= "string") title = fn_short or ""
	
		
	local version = meta.version
	if (type(version) ~= "string") version = nil
	
	local author = meta.author 
	if (type(author) ~= "string") author = nil
	
	title..= " \014\^i\|h"--..meta.version
	
	print(title, 34, (version or author) and 8 or 12, 1)
	
		local str = "\014"
		if (version) str..= "\^i"..meta.version.."\^-i "
		if (author and author ~= "") str..= "\fdby "..meta.author:lower()
		print(str, 33, 20, 13)	
		
--[[
	if (meta.author and meta.author != "") then
		cursor(10,32) color(13)
		print("// by "..meta.author)
	end
]]

	-- 3 lines of notes
	if (meta.notes and meta.notes != "") then
		cursor(10,38) color(5)
		print(meta.notes)
	end
	
	
	local attribs, size, origin = fstat(fn)
	
	local yy = get_display():height()-42
--	if (not origin) yy += 6
	if (not meta.bbs_id) yy += 12


--[[
	cursor(10, yy) color(13)
	--?"\014author:    "..("zep" or "-")
	--?"\014revision:  "..(meta.revision or "-")

	--rectfill(0,yy-4,1000,1000,1)
	color(18)
	?"\014"..(fn or "?")
	?"\014"..((size and (size.." bytes on disk")) or "-")

	-- local times; to do: click to toggle gmt
	-- to do: n days ago
	color(13)
	?"\014"..(meta.created and date("%Y-%m-%d %H:%M:%S", meta.created) or "[no date_created]")
	?"\014"..(meta.modified and date("%Y-%m-%d %H:%M:%S", meta.modified) or "[no date_modified]")


	if (origin) ?"\014origin: "..(origin or fullpath(fn) or "?")	
	
	if (meta.bbs_id) then
		color(18)
		?"\014bbs_id: "..meta.bbs_id

		if (meta.sandbox == "bbs") then
			?"\014\fi    [/] sandboxed"
		else
			?"\014\fd    [ ] sandboxed"
		end

	end
]]

	
	end -- "view" mode
	
	
	gui:draw_all()
end

function _update()

	if (mode == "icon") icon_editor_update()

	gui:update_all()
end































:: .info.pod
b64$LS1bW3BvZCxhdXRob3I9InplcCIsYmJzX2lkPSJfZGV2MjM2NiIsY3JlYXRlZD0iMjAyNS0w
My0xNCAxNDozMjowMSIsaWNvbj11c2VyZGF0YSgidTgiLDE2LDE2LCIwMDAwMDAwMjAyMDIwMjAy
MDIwMjAyMDIwMjAwMDAwMDAwMDAwMjA3MDcwNzA3MDcwNzA3MDcwNzA3MDIwMDAwMDAwMjA3MWUx
ZTFlMWUxZTFlMWUxZTFlMWUwNzAyMDAwMjA3MWUxZTFlMWUwNzA3MDcwNzFlMWUxZTFlMDcwMjAy
MDcxZTFlMWUwNzA3MWUxZTA3MDcxZTFlMWUwNzAyMDIwNzFlMWUwNzA3MDcwNzA3MDcwNzA3MWUx
ZTA3MDIwMjA3MWUxZTA3MDcwNzFlMWUwNzA3MDcxZTFlMDcwMjAyMDcxZTFlMDcwNzA3MWUxZTA3
MDcwNzFlMWUwNzAyMDIwNzFlMWUwNzA3MDcxZTFlMDcwNzA3MWUxZTA3MDIwMjA3MWUxZTFlMDcw
NzFlMWUwNzA3MWUxZTFlMDcwMjAyMDcxZTFlMWUxZTA3MDcwNzA3MWUxZTFlMWUwNzAyMDIxNzA3
MWUxZTFlMWUxZTFlMWUxZTFlMWUwNzE3MDIwMjE3MTcwNzA3MDcwNzA3MDcwNzA3MDcwNzE3MTcw
MjAwMDIxNzE3MTcxNzE3MTcxNzE3MTcxNzE3MTcwMjAwMDAwMDAyMTcxNzE3MTcxNzE3MTcxNzE3
MTcwMjAwMDAwMDAwMDAwMjAyMDIwMjAyMDIwMjAyMDIwMjAwMDAwMCIpLG1vZGlmaWVkPSIyMDI1
LTA1LTEzIDExOjQ4OjE1Iixub3Rlcz0iRmlsZSBtZXRhZGF0YSB2aWV3ZXIgYW5kIGVkaXRvci5c
bkNsaWNrIG9uIHRoZSBpY29uIHRvIGVkaXQgaXQhXG4iLHJ1bnRpbWU9MTcsc2FuZGJveD1mYWxz
ZSxzdG9yZWQ9IjIwMjQtMDMtMjMgMTk6MzQ6MTUiLHRpdGxlPSJBYm91dCIsdmVyc2lvbj0iMC4y
Iix3b3Jrc3BhY2VzPXt7bG9jYXRpb249Im1haW4ubHVhIzEiLHdvcmtzcGFjZV9pbmRleD0xfSx7
bG9jYXRpb249Imd1aS5sdWEjMSIsd29ya3NwYWNlX2luZGV4PTF9LHtsb2NhdGlvbj0iaWNvbi5s
dWEjMTQiLHdvcmtzcGFjZV9pbmRleD0xfSx7bG9jYXRpb249ImdmeC8wLmdmeCIsd29ya3NwYWNl
X2luZGV4PTJ9LHtsb2NhdGlvbj0ibWFwLzAubWFwIix3b3Jrc3BhY2VfaW5kZXg9M319XV0=
:: [eoc]
